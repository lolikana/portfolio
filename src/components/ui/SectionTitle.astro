---
type Props = {
	sectionNumber: number;
	sectionTitle: string;
};
const { sectionNumber, sectionTitle } = Astro.props;
---

<h2 class="section-title" data-show-title="false">
	<span class="section-title__number">
		{sectionNumber.toString().padStart(2, '0')}.
	</span>
	<span class="section-title__text">{sectionTitle}</span>
</h2>

<script>
	const allSectionsTitles = document.querySelectorAll('.section-title');

	const revealSectionTitle = (
		entries: IntersectionObserverEntry[],
		observer: IntersectionObserver
	) => {
		entries.forEach(entry => {
			if (!entry.isIntersecting) return;
			const target = entry.target as HTMLTitleElement;
			target.dataset.showTitle = 'true';
			observer.unobserve(entry.target);
		});
	};

	const sectionTitleObserver = new IntersectionObserver(revealSectionTitle, {
		root: null,
		rootMargin: '-50px',
		threshold: 0.5
	});

	allSectionsTitles.forEach(section => sectionTitleObserver.observe(section));
</script>

<style lang="scss">
	.section-title {
		--transition-duration: 500ms;

		width: calc(100% - 2rem);
		max-width: 760px;
		margin: 0 auto 4rem auto;
		position: relative;
		overflow: hidden;

		&::after {
			width: 30vw;
			max-width: 400px;
			transition: width var(--transition-duration) ease;
		}

		&[data-show-title='false'] {
			&::after {
				width: 0;
			}
			.section-title__text {
				opacity: 0;
			}
		}

		.section-title__number {
			@include font-responsive($font20, 3vw, $font24);
			color: $secondary-color;
			padding-right: 0.5rem;
		}

		.section-title__text {
			opacity: 1;
			transition: opacity var(--transition-duration) ease;
			color: $primary-color;
			@container style(--theme: dark) {
				color: $tertiary-color;
			}
			padding-right: 1rem;
		}

		&::after {
			content: '';
			height: 2px;
			background-color: $primary-color;
			@container style(--theme: dark) {
				background-color: $tertiary-color;
			}
			position: absolute;
			top: 50%;
		}
	}
</style>
