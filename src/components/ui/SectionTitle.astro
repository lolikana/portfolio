---
type Props = {
	sectionNumber: number;
	sectionTitle: string;
};
const { sectionNumber, sectionTitle } = Astro.props;
---

<h1 class="section-title" data-show-title="false">
	<span class="section-title__number">
		{sectionNumber.toString().padStart(2, '0')}.
	</span>
	<span class="section-title__text">{sectionTitle}</span>
</h1>

<script>
	const observer = new IntersectionObserver(
		entries => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const target = entry.target as HTMLTitleElement;
					target.dataset.showTitle = 'true';
				}
			});
		},
		{
			root: null,
			rootMargin: '-50px',
			threshold: 0.5
		}
	);

	const sections = document.querySelectorAll('.section-title');

	sections.forEach(section => observer.observe(section));
</script>

<style lang="scss">
	.section-title {
		--transition-duration: 500ms;

		width: calc(100% - 2rem);
		position: relative;
		overflow: hidden;

		&::after {
			width: 30vw;
			max-width: 400px;
			transition: width var(--transition-duration) ease;
		}

		&[data-show-title='false'] {
			&::after {
				width: 0;
			}
			.section-title__text {
				opacity: 0;
			}
		}

		.section-title__number {
			padding-right: 0.5rem;
		}

		.section-title__text {
			opacity: 1;
			transition: opacity var(--transition-duration) ease;
			color: $main-color;
			@container style(--theme: dark) {
				color: $secondary-color;
			}
			@include font-responsive(1.5rem, 3vw, 2rem);
			padding-right: 1rem;
		}

		&::after {
			content: '';
			height: 2px;
			background-color: $main-color;
			@container style(--theme: dark) {
				background-color: $secondary-color;
			}
			position: absolute;
			top: 50%;
		}
	}
</style>
